
`timescale 1 ns / 1 ps

	module conv_adc_v1_0_M00_AXI #
	(
		// Users to add parameters here

		// User parameters ends
		// Do not modify the parameters beyond this line

		// The master will start generating data from the C_M_START_DATA_VALUE value
		parameter  C_M_START_DATA_VALUE	= 32'hAA000000,
		// The master requires a target slave base address.
    // The master will initiate read and write transactions on the slave with base address specified here as a parameter.
		parameter  C_M_TARGET_SLAVE_BASE_ADDR	= 32'h44A0_0000,
		// Width of M_AXI address bus. 
    // The master generates the read and write addresses of width specified as C_M_AXI_ADDR_WIDTH.
		parameter integer C_M_AXI_ADDR_WIDTH	= 32,
		// Width of M_AXI data bus. 
    // The master issues write data and accept read data where the width of the data bus is C_M_AXI_DATA_WIDTH
		parameter integer C_M_AXI_DATA_WIDTH	= 32,
		// Transaction number is the number of write 
    // and read transactions the master will perform as a part of this example memory test.
		parameter integer C_M_TRANSACTIONS_NUM	= 4
	)
	(
		// Users to add ports here
        input en,
        output reg [15 : 0] adc_data, //data provided by the ADC
        output reg adc_data_valid,
		// User ports ends
		// Do not modify the ports beyond this line

		// Initiate AXI transactions
		input wire  INIT_AXI_TXN,
		// Asserts when ERROR is detected
		output reg  ERROR,
		// Asserts when AXI transactions is complete
		output wire  TXN_DONE,
		// AXI clock signal
		input wire  M_AXI_ACLK,
		// AXI active low reset signal
		input wire  M_AXI_ARESETN,
		// Master Interface Write Address Channel ports. Write address (issued by master)
		output wire [C_M_AXI_ADDR_WIDTH-1 : 0] M_AXI_AWADDR,
		// Write channel Protection type.
    // This signal indicates the privilege and security level of the transaction,
    // and whether the transaction is a data access or an instruction access.
		output wire [2 : 0] M_AXI_AWPROT,
		// Write address valid. 
    // This signal indicates that the master signaling valid write address and control information.
		output wire  M_AXI_AWVALID,
		// Write address ready. 
    // This signal indicates that the slave is ready to accept an address and associated control signals.
		input wire  M_AXI_AWREADY,
		// Master Interface Write Data Channel ports. Write data (issued by master)
		output wire [C_M_AXI_DATA_WIDTH-1 : 0] M_AXI_WDATA,
		// Write strobes. 
    // This signal indicates which byte lanes hold valid data.
    // There is one write strobe bit for each eight bits of the write data bus.
		output wire [C_M_AXI_DATA_WIDTH/8-1 : 0] M_AXI_WSTRB,
		// Write valid. This signal indicates that valid write data and strobes are available.
		output wire  M_AXI_WVALID,
		// Write ready. This signal indicates that the slave can accept the write data.
		input wire  M_AXI_WREADY,
		// Master Interface Write Response Channel ports. 
    // This signal indicates the status of the write transaction.
		input wire [1 : 0] M_AXI_BRESP,
		// Write response valid. 
    // This signal indicates that the channel is signaling a valid write response
		input wire  M_AXI_BVALID,
		// Response ready. This signal indicates that the master can accept a write response.
		output wire  M_AXI_BREADY,
		// Master Interface Read Address Channel ports. Read address (issued by master)
		output wire [C_M_AXI_ADDR_WIDTH-1 : 0] M_AXI_ARADDR,
		// Protection type. 
    // This signal indicates the privilege and security level of the transaction, 
    // and whether the transaction is a data access or an instruction access.
		output wire [2 : 0] M_AXI_ARPROT,
		// Read address valid. 
    // This signal indicates that the channel is signaling valid read address and control information.
		output wire  M_AXI_ARVALID,
		// Read address ready. 
    // This signal indicates that the slave is ready to accept an address and associated control signals.
		input wire  M_AXI_ARREADY,
		// Master Interface Read Data Channel ports. Read data (issued by slave)
		input wire [C_M_AXI_DATA_WIDTH-1 : 0] M_AXI_RDATA,
		// Read response. This signal indicates the status of the read transfer.
		input wire [1 : 0] M_AXI_RRESP,
		// Read valid. This signal indicates that the channel is signaling the required read data.
		input wire  M_AXI_RVALID,
		// Read ready. This signal indicates that the master can accept the read data and response information.
		output wire  M_AXI_RREADY
	);

	// AXI4LITE signals
	//read address valid
	reg  	axi_arvalid;
	//read data acceptance
	reg  	axi_rready;
	//read addresss
	reg [C_M_AXI_ADDR_WIDTH-1 : 0] 	axi_araddr;


    
	// I/O Connections assignments

	//Write signals will not be used for this module
	assign M_AXI_AWADDR	 = 0;
	assign M_AXI_WDATA	 = 0;
	assign M_AXI_AWPROT	 = 0;
	assign M_AXI_AWVALID = 0;
	assign M_AXI_WVALID	 = 0;
	assign M_AXI_WSTRB	= 4'b1111;
	assign M_AXI_BREADY	= 0;
	
	
	//Read signals 
	assign M_AXI_ARADDR	 = C_M_TARGET_SLAVE_BASE_ADDR + axi_araddr;
	assign M_AXI_ARVALID = axi_arvalid;
	assign M_AXI_ARPROT	 = 3'b001;
	//Read and Read Response (R)
	assign M_AXI_RREADY	 = axi_rready;
	
	
	
	//-----------------------------------------------------
	//counter used to generate a read transaction every 2us
	//-----------------------------------------------------
	
    reg [31:0] sampling_counter;
    localparam sampling_counter_limit = 199;
    
    always@(posedge M_AXI_ACLK)
    begin
        if(M_AXI_ARESETN == 0)
            sampling_counter <= 0;
        else
            if(sampling_counter >= sampling_counter_limit)
                sampling_counter <= 0;
            else 
                sampling_counter <= sampling_counter + 1;
    end
                                          

	//----------------------------
	//Read Address Channel
	//----------------------------
                                                                   
	always @(posedge M_AXI_ACLK)                                                     
		begin                                                                            
		if (M_AXI_ARESETN == 0)                                                       
			axi_arvalid <= 1'b0;          
		else 
			if(axi_arvalid == 1)
				begin
				if(M_AXI_ARREADY == 1)
					begin
					axi_arvalid <= 0;
					end
				else
					begin
					axi_arvalid <= axi_arvalid;
					end
				end
			else// if axi_arvalid==0
				begin
				if(sampling_counter >= sampling_counter_limit)
					begin
					axi_arvalid <= 1;
					end
				else
					begin
					axi_arvalid <= 0;
					end
				end                                      
		end                                                                              


	//--------------------------------
	//Read Data Channel
	//--------------------------------

	  always @(posedge M_AXI_ACLK)                                    
	  begin                                                                 
	    if (M_AXI_ARESETN == 0)                                            
	      begin                                                             
	      axi_rready <= 1'b0;                                             
	      end                                                                                          
	    else 
	       begin
	       axi_rready <= 1'b1;   
	       end                                  
	  end                                                                   
                                                   	                                       
	                                                                
	//--------------------------------
	//Read Address Channel
	//--------------------------------                                              
	  always @(posedge M_AXI_ACLK)                                  
	      begin                                                                                                   
	          axi_araddr <= 32'h0000_020C;                                                              
	      end                                                       
	                                                                
	//--------------------------------
    //Read data storage 
	//--------------------------------                                                           
	                                                               
	always @(posedge M_AXI_ACLK)                                  
	begin                                                     
		if (M_AXI_ARESETN == 0 )                                
			begin             
			adc_data <=  16'd0;
			adc_data_valid <= 0;            
			end                                              
		else 
			begin
			if (M_AXI_RVALID && axi_rready && en)                    
				begin  
				adc_data <=  M_AXI_RDATA[15:0]; 
				adc_data_valid <= 1;                 
				end
			else
				begin
				adc_data_valid <= 0;
				adc_data <= adc_data;
				end                 
			end
	end                                                       

endmodule
	

