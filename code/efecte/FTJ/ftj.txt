	reg signed [15:0] buffer[15:0];
	reg signed [31:0] sum = 0;
	reg signed [15:0] signal_out;
	
	integer i;
	
	always @(posedge s00_axi_aclk) begin
	    if (s00_axi_aresetn == 1'b0) 
	    	begin
	    	    sum <= 0;
	    	    signal_out <= 0;
	    	    for (i = 0; i < 16; i = i + 1)
	    	        buffer[i] <= 0;
	    	end
	    else 
	    	begin
	    		if(valid)
	    			begin
	    			    sum <= buffer[0] + buffer[1] +buffer[2] +buffer[3] +buffer[4] +buffer[5] +buffer[6] +buffer[7] +buffer[8] +buffer[9] +buffer[10] +buffer[11] +buffer[12] +buffer[13] +buffer[14] +buffer[15];

	    			    for (i = 15; i > 0; i = i - 1)
	    			        buffer[i] <= buffer[i-1];
	    			        
	    			    buffer[0] <= in_data;
	
	    			    signal_out <= sum >>> 4; // Right shift by 4 is equivalent to dividing by 16
    				end
    			else 
    				signal_out <= signal_out;
    		end
	end